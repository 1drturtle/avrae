name: Deploy

on:
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  # ===== ecs deploy =====
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: avrae
      SERVICE_NAME: avrae-bot
      DEPLOY_ENV: live
      REGION: us-east-1

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: avrae/${{ env.SERVICE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $SERVICE_NAME --build-arg COMMIT=$GITHUB_SHA .
          docker tag $SERVICE_NAME $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $SERVICE_NAME $ECR_REGISTRY/$ECR_REPOSITORY:$DEPLOY_ENV
        # docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $SERVICE_NAME-ecs-task-definition --query taskDefinition > task-definition.json

  # todo uncomment to not dry-run
  #      - name: Deploy Amazon ECS task definition
  #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #        if: ${{ secrets.DO_RELEASE != '0' }}
  #        with:
  #          task-definition: task-definition.json
  #          service: ${{ env.SERVICE_NAME }}
  #          cluster: ${{ env.CLUSTER_NAME }}-${{ env.DEPLOY_ENV }}
  #          force-new-deployment: true

  # ===== help gen =====
  build-docs:
    name: Build/Upload Help
    runs-on: ubuntu-latest
    services: # bot instance depends on services
      redis: # redis://redis:6379/0
        image: redis
        ports:
          - 6379:6379
      mongo: # mongodb://root:topsecret@mongo:27017
        image: mongo
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: topsecret
    env:
      NO_DICECLOUD: 1
      DISCORD_OWNER_USER_ID: "98765432109876543"
      MONGO_URL: "mongodb://root:topsecret@localhost:27017"
      REDIS_URL: "redis://localhost:6379/0"
      REGION: us-east-1

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          mkdir shared

      - name: Build Help Manifest
        run: python scripts/gen_command_json.py -o shared/commands.json test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

#      - name: Upload Help Manifest
#        run: aws s3 cp shared/commands.json s3://media.avrae.io/ --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers --region $REGION

      - name: Upload manifest as artifact
        uses: actions/upload-artifact@v2
        with:
          name: help-manifest
          path: shared/commands.json

  # ===== sentry release =====
  sentry:
    name: Create Sentry Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
#      - name: Create Sentry release
#        uses: getsentry/action-release@v1
#        env:
#          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#          SENTRY_ORG: curse-llc
#          SENTRY_PROJECT: avrae-bot
#        with:
#          environment: production


